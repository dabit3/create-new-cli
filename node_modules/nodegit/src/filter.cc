// This is a generated file, modify: generate/templates/templates/class_content.cc

#include <nan.h>
#include <string.h>

extern "C" {
#include <git2.h>
#include <git2/sys/filter.h>
}

#include "../include/nodegit.h"
#include "../include/lock_master.h"
#include "../include/functions/copy.h"
#include "../include/filter.h"
#include "nodegit_wrapper.cc"
#include "../include/async_libgit2_queue_worker.h"


#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

GitFilter::~GitFilter()
{
  // this will cause an error if you have a non-self-freeing object that also needs
  // to save values. Since the object that will eventually free the object has no
  // way of knowing to free these values.
}

void GitFilter::InitializeComponent(v8::Local<v8::Object> target)
{
  Nan::HandleScope scope;

  v8::Local<FunctionTemplate> tpl = Nan::New<FunctionTemplate>(JSNewFunction);

  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(Nan::New("Filter").ToLocalChecked());

  Nan::SetPrototypeMethod(tpl, "version", Version);
  Nan::SetPrototypeMethod(tpl, "attributes", Attributes);

  InitializeTemplate(tpl);

  v8::Local<Function> _constructor_template = Nan::GetFunction(tpl).ToLocalChecked();
  constructor_template.Reset(_constructor_template);
  Nan::Set(target, Nan::New("Filter").ToLocalChecked(), _constructor_template);
}

NAN_METHOD(GitFilter::Version)
{
  v8::Local<v8::Value> to;

  unsigned int
  version =
    Nan::ObjectWrap::Unwrap<GitFilter>(info.This())->GetValue()->version;
// start convert_to_v8 block
  to = Nan::New<Number>( version);
  // end convert_to_v8 block
  info.GetReturnValue().Set(to);
}
NAN_METHOD(GitFilter::Attributes)
{
  v8::Local<v8::Value> to;

  const char *
  attributes =
    Nan::ObjectWrap::Unwrap<GitFilter>(info.This())->GetValue()->attributes;
// start convert_to_v8 block
  if (attributes) {
    to = Nan::New<String>(attributes).ToLocalChecked();
  } else {
    to = Nan::Null();
  }

  // end convert_to_v8 block
  info.GetReturnValue().Set(to);
}
// force base class template instantiation, to make sure we get all the
// methods, statics, etc.
template class NodeGitWrapper<GitFilterTraits>;
